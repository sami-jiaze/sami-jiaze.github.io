(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{572:function(t,v,_){t.exports=_.p+"assets/img/21xss.1f23ff3c.png"},573:function(t,v,_){t.exports=_.p+"assets/img/20xss-1680512975223.e5103190.png"},681:function(t,v,_){"use strict";_.r(v);var s=_(2),e=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[t._v("总览")]),t._v(" "),v("p",[t._v("什么是XSS，CSRF攻击，以及他们对应的防护方式")])]),t._v(" "),v("h2",{attrs:{id:"常见浏览器攻击方式与防护"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常见浏览器攻击方式与防护"}},[t._v("#")]),t._v(" 常见浏览器攻击方式与防护")]),t._v(" "),v("h2",{attrs:{id:"xss攻击"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#xss攻击"}},[t._v("#")]),t._v(" XSS攻击")]),t._v(" "),v("p",[t._v("Cross Site Scrit 跨站脚本攻击（为与 CSS 区别，所以在安全领域叫 XSS）指浏览器中执行恶意脚本(无论是跨域还是同域)，从而拿到用户的信息并进行操作。")]),t._v(" "),v("p",[t._v("XSS 攻击的实现有三种方式——"),v("strong",[t._v("存储型")]),t._v("、"),v("strong",[t._v("反射型")]),t._v("和"),v("strong",[t._v("文档型")]),t._v("。")]),t._v(" "),v("p",[v("strong",[t._v("存储型")])]),t._v(" "),v("p",[v("code",[t._v("存储型")]),t._v("，将恶意脚本存储了起来，存储型的 XSS 将脚本存储到了服务端的数据库，然后在客户端执行这些脚本，从而达到攻击的效果。")]),t._v(" "),v("p",[t._v("常见的场景是留言评论区提交一段脚本代码，如果前后端没有做好转义的工作，那评论内容存到了数据库，在页面渲染过程中"),v("code",[t._v("直接执行")]),t._v(", 相当于执行一段未知逻辑的 JS 代码。这就是存储型的 XSS 攻击。")]),t._v(" "),v("p",[v("img",{attrs:{src:_(572),alt:""}})]),t._v(" "),v("p",[v("strong",[t._v("反射型")])]),t._v(" "),v("p",[v("code",[t._v("反射型XSS")]),t._v("指的是恶意脚本作为"),v("strong",[t._v("网络请求的一部分")]),t._v("。")]),t._v(" "),v("p",[t._v("比如我输入:")]),t._v(" "),v("div",{staticClass:"language-xml line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-xml"}},[v("code",[t._v("http://sanyuan.com?q="),v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('alert("xss")'),v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token tag"}},[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br")])]),v("p",[t._v("这杨，在服务器端会拿到"),v("code",[t._v("q")]),t._v("参数,然后将内容返回给浏览器端，浏览器将这些内容作为HTML的一部分解析，发现是一个脚本，直接执行，这样就被攻击了。")]),t._v(" "),v("p",[t._v("之所以叫它"),v("code",[t._v("反射型")]),t._v(", 是因为恶意脚本是通过作为网络请求的参数，经过服务器，然后再反射到HTML文档中，执行解析。和"),v("code",[t._v("存储型")]),t._v("不一样的是，服务器并不会存储这些恶意脚本。")]),t._v(" "),v("p",[v("img",{attrs:{src:_(573),alt:""}})]),t._v(" "),v("p",[v("strong",[t._v("文档型")])]),t._v(" "),v("p",[t._v("基于 DOM 的 XSS 攻击是不牵涉到页面 Web 服务器的。具体来讲，黑客通过各种手段将恶意脚本注入用户的页面中，比如通过网络劫持在页面传输过程中修改 HTML 页面的内容，这种劫持类型很多，有通过 WiFi 路由器劫持的，有通过本地恶意软件来劫持的，它们的共同点是在 Web 资源传输过程或者在用户使用页面的过程中修改 Web 页面的数据。")]),t._v(" "),v("h2",{attrs:{id:"xss防范"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#xss防范"}},[t._v("#")]),t._v(" XSS防范")]),t._v(" "),v("p",[t._v("无论是在前端和服务端，都要对用户的输入进行"),v("strong",[t._v("转码")]),t._v("或者"),v("strong",[t._v("过滤")]),t._v("。")]),t._v(" "),v("p",[v("strong",[t._v("利用 CSP（内容安全策略）")])]),t._v(" "),v("p",[t._v("网站通过发送一个 CSP 头部，来告诉浏览器什么是被授权执行的与什么是需要被禁止的")]),t._v(" "),v("p",[t._v("CSP，即浏览器中的内容安全策略，它的核心思想就是服务器决定浏览器加载哪些资源，具体来说可以完成以下功能:")]),t._v(" "),v("ol",[v("li",[t._v("限制其他域下的资源加载。")]),t._v(" "),v("li",[t._v("禁止向其它域提交数据。")]),t._v(" "),v("li",[t._v("提供上报机制，能帮助我们及时发现 XSS 攻击。")])]),t._v(" "),v("p",[t._v("CSP 的实质就是白名单制度，开发者明确告诉客户端，哪些外部资源可以加载和执行，等同于提供白名单。它的实现和执行全部由浏览器完成，开发者只需提供配置")]),t._v(" "),v("p",[v("strong",[t._v("利用 HttpOnly")])]),t._v(" "),v("p",[t._v("很多 XSS 攻击脚本都是用来窃取Cookie, 而设置 Cookie 的 HttpOnly 属性后，JavaScript 便无法读取 Cookie 的值。这样也能很好的防范 XSS 攻击。")]),t._v(" "),v("h2",{attrs:{id:"csrf攻击"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#csrf攻击"}},[t._v("#")]),t._v(" CSRF攻击")]),t._v(" "),v("p",[t._v("Cross-Site Request Forgery 跨站请求伪造")]),t._v(" "),v("p",[v("strong",[t._v("对比XSS：")]),t._v(" 跟跨网站脚本(XSS)相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。")]),t._v(" "),v("p",[t._v("CSRF攻击者不能获取到Cookie等信息，只是使用。")]),t._v(" "),v("blockquote",[v("p",[t._v("CSRF攻击攻击原理及过程如下：")]),t._v(" "),v("ol",[v("li",[t._v("用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；")]),t._v(" "),v("li",[t._v("在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；")]),t._v(" "),v("li",[t._v("用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B；")]),t._v(" "),v("li",[t._v("网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；")]),t._v(" "),v("li",[t._v("浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。")])])]),t._v(" "),v("h2",{attrs:{id:"csrf防范"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#csrf防范"}},[t._v("#")]),t._v(" CSRF防范")]),t._v(" "),v("p",[v("strong",[t._v("1. 利用Cookie的SameSite属性")])]),t._v(" "),v("p",[v("code",[t._v("SameSite")]),t._v("可以设置为三个值，"),v("code",[t._v("Strict")]),t._v("、"),v("code",[t._v("Lax")]),t._v("和"),v("code",[t._v("None")]),t._v("。")]),t._v(" "),v("p",[v("strong",[t._v("a.")]),t._v(" 在"),v("code",[t._v("Strict")]),t._v("模式下，完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。换言之，只有当前网页的 URL 与请求目标一致，才会带上 Cookie，比如请求"),v("code",[t._v("sanyuan.com")]),t._v("网站只能在"),v("code",[t._v("sanyuan.com")]),t._v("域名当中请求才能携带 Cookie，在其他网站请求都不能。")]),t._v(" "),v("p",[v("strong",[t._v("b.")]),t._v(" 在"),v("code",[t._v("Lax")]),t._v("模式，就宽松一点了，但是只能在 "),v("code",[t._v("get 方法提交表单")]),t._v("况或者"),v("code",[t._v("a 标签发送 get 请求")]),t._v("的情况下可以携带 Cookie，其他情况均不能。")]),t._v(" "),v("p",[v("strong",[t._v("c.")]),t._v(" 在"),v("code",[t._v("None")]),t._v("模式下，也就是默认模式，请求会自动携带上 Cookie。")]),t._v(" "),v("p",[v("strong",[t._v("2. 验证来源站点")])]),t._v(" "),v("p",[t._v("这就需要要用到请求头中的两个字段: "),v("strong",[t._v("Origin")]),t._v("和"),v("strong",[t._v("Referer")]),t._v("。")]),t._v(" "),v("p",[t._v("其中，"),v("strong",[t._v("Origin")]),t._v("只包含域名信息，而"),v("strong",[t._v("Referer")]),t._v("包含了"),v("code",[t._v("具体")]),t._v("的 URL 路径。")]),t._v(" "),v("p",[t._v("这两者都是可以伪造的，通过 Ajax 中自定义请求头即可，安全性略差。")]),t._v(" "),v("p",[v("strong",[t._v("3. CSRF Token")])]),t._v(" "),v("p",[v("code",[t._v("Django")]),t._v("作为 Python 的一门后端框架，如果是用它开发过的同学就知道，在它的模板(template)中, 开发表单时，经常会附上这样一行代码:")]),t._v(" "),v("div",{staticClass:"language-erlang line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-erlang"}},[v("code",[v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("% csrf_token %}")]),t._v("\n")])]),t._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[t._v("1")]),v("br")])]),v("p",[t._v("这就是"),v("code",[t._v("CSRF Token")]),t._v("的典型应用。那它的原理是怎样的呢？")]),t._v(" "),v("p",[t._v("首先，浏览器向服务器发送请求时，服务器生成一个字符串，将其植入到返回的页面中。")]),t._v(" "),v("p",[t._v("然后浏览器如果要发送请求，就必须带上这个字符串，然后服务器来验证是否合法，如果不合法则不予响应。这个字符串也就是"),v("code",[t._v("CSRF Token")]),t._v("，通常第三方站点无法拿到这个 token, 因此也就是被服务器给拒绝")]),t._v(" "),v("h2",{attrs:{id:"参考"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),v("p",[v("a",{attrs:{href:"https://juejin.cn/post/7040636169331146759",target:"_blank",rel:"noopener noreferrer"}},[t._v("这一次彻底搞懂CSRF与XSS - 掘金 (juejin.cn)"),v("OutboundLink")],1)]),t._v(" "),v("p",[v("a",{attrs:{href:"https://juejin.cn/post/6945277278347591688#heading-4",target:"_blank",rel:"noopener noreferrer"}},[t._v("XSS 和 CSRF 攻击详解 - 掘金 (juejin.cn)"),v("OutboundLink")],1)]),t._v(" "),v("p",[v("a",{attrs:{href:"https://juejin.cn/post/6844904021308735502#heading-75",target:"_blank",rel:"noopener noreferrer"}},[t._v("(1.6w字)浏览器灵魂之问，请问你能接得住几个？ - 掘金 (juejin.cn)"),v("OutboundLink")],1)]),t._v(" "),v("p",[v("a",{attrs:{href:"https://juejin.cn/post/6945277278347591688#heading-4",target:"_blank",rel:"noopener noreferrer"}},[t._v("XSS 和 CSRF 攻击详解 - 掘金 (juejin.cn)"),v("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=e.exports}}]);