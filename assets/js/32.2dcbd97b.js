(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{467:function(e,a,n){e.exports=n.p+"assets/img/image-20230401160125390.d09dffb0.png"},468:function(e,a,n){e.exports=n.p+"assets/img/image-20230321084803087.b0abc25e.png"},469:function(e,a,n){e.exports=n.p+"assets/img/image-20230321085306628.051fc4c9.png"},672:function(e,a,n){"use strict";n.r(a);var s=n(2),r=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("说明")]),e._v(" "),a("p",[e._v("npm,yarn和pnpm、软硬链接、嵌套安装与扁平安装、npx、.npmrc笔记总结")])]),e._v(" "),a("h2",{attrs:{id:"npm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm"}},[e._v("#")]),e._v(" npm")]),e._v(" "),a("p",[e._v("npm（“Node 包管理器”）是 JavaScript 运行时 Node.js 的默认程序包管理器。")]),e._v(" "),a("p",[e._v("它也被称为“Ninja Pumpkin Mutants”，“Nonprofit Pizza Makers”，以及许多其他随机名称，你可以在  "),a("a",{attrs:{href:"https://github.com/npm/npm-expansions",target:"_blank",rel:"noopener noreferrer"}},[e._v("npm-expansions"),a("OutboundLink")],1),e._v(" 上探索这些名称。")]),e._v(" "),a("p",[e._v("npm 由两个主要部分组成:")]),e._v(" "),a("ul",[a("li",[e._v("用于发布和下载程序包的 CLI（命令行界面）工具")]),e._v(" "),a("li",[e._v("托管 JavaScript 程序包的  "),a("a",{attrs:{href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("在线存储库"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"yarn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yarn"}},[e._v("#")]),e._v(" yarn")]),e._v(" "),a("p",[e._v("Yarn 是由 Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具，是为了弥补 npm 的一些缺陷而出现的")]),e._v(" "),a("p",[e._v("安装过的包会被保存进缓存目录，以后安装就直接从缓存中复制过来，这样做的本质还是会提高安装下载的速度，避免不必要的网络请求。")]),e._v(" "),a("h2",{attrs:{id:"嵌套安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#嵌套安装"}},[e._v("#")]),e._v(" 嵌套安装")]),e._v(" "),a("p",[a("em",[e._v("npm@3")]),e._v(" 之前，node_modules 中的"),a("strong",[e._v("每个依赖项")]),e._v("都有自己的"),a("em",[e._v("node_modules")]),e._v("文件夹，在"),a("em",[e._v("package.json中")]),e._v("指定了所有依赖项。例如下面所示，项目依赖了"),a("code",[e._v("foo")]),e._v("，"),a("code",[e._v("foo")]),e._v("又依赖了"),a("code",[e._v("bar")]),e._v("，依赖关系如下图所示")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("node_modules\n└─ foo\n   ├─ index.js\n   ├─ package.json\n   └─ node_modules\n      └─ bar\n         ├─ index.js\n         └─ package.json\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br")])]),a("p",[e._v("上面结构有两个严重的问题：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("package中经常创建太深的依赖树，这会导致 Windows 上的目录路径过长问题")])]),e._v(" "),a("li",[a("p",[e._v("当一个package在不同的依赖项中需要时，它会被多次复制粘贴并生成多份文件")])])]),e._v(" "),a("h2",{attrs:{id:"扁平安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扁平安装"}},[e._v("#")]),e._v(" 扁平安装")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("优点:")]),e._v(" "),a("p",[e._v("减少不必要的安装，假如A和B都需要依赖C那么扁平的安装就可以让A和B都能使用C，不需要在各自内部文件夹单独安装C")])]),e._v(" "),a("li",[a("p",[e._v("缺点:")]),e._v(" "),a("p",[e._v("幽灵依赖：由于扁平化导致源码可以访问本不属于当前项目所设定的依赖包;")]),e._v(" "),a("p",[e._v("项目里使用了，但是未在项目的package.json 中定义的包。就是幽灵依赖。 按着原理来说 未在package.json中定义的包 不会被下载，但是它偏偏就存在了，也被下载了，这又是为什么呢？ 因为依赖提升，造成的副作用")]),e._v(" "),a("p",[e._v("比如说我们这里有一个项目，安装了 A 这个库，版本是 v1，但是 A 库又依赖一个 B 库，版本也是 v1。")]),e._v(" "),a("p",[e._v("我们项目里明明没有手动安装这个 B 库，但是在项目里边仍然可以去导入它并且使用，这就产生了幽灵依赖。")]),e._v(" "),a("p",[e._v("一旦有一天因为某种原因，我们要把 A 库进行升级，升级的 v2 的版本，v2 这个版本有可能要使用 B 库的 v2 版本，于是 B 库也会跟着升级，而 B 库升级之后，它里边有些 API 可能有变动，那么就会导致我们之前用 B 库的代码全部出问题了。")]),e._v(" "),a("p",[e._v("NPM分身：不同版本的情况下有大量的依赖可能被重复安装，这种场景在monorepo 多包场景下尤其明显，这也是"),a("code",[e._v("yarn workspace")]),e._v("经常被吐槽的点，另外扁平化的算法实现也相当复杂，改动成本很高")])])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("项目中有packageA、packageB、packageC、packageD。packageA依赖packageX 1.0和packageY 1.0，packageB依赖packageX 2.0和packageY 2.0，packageC依赖packageX 1.0和packageY 2.0，packageD依赖packageX 2.0和packageY 1.0\n\n- package X => 1.0版本\n- package Y => 1.0版本\n\n- package A\n- package B\n    - packageX 2.0\n    - packageY 2.0\n- package C\n    - packageY 2.0\n- package D\n    - packageX 2.0\n\npackageX 2.0和packageY 2.0被重复安装多次，从而造成 npm 和 yarn 的性能一些性能损失。\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br")])]),a("h2",{attrs:{id:"软链接和硬链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软链接和硬链接"}},[e._v("#")]),e._v(" 软链接和硬链接")]),e._v(" "),a("p",[e._v("软链接：类似于Windows的快捷方式，会创建新的文件和 inode，但是软链接文件inode指向源文件的 inode")]),e._v(" "),a("p",[e._v("硬链接：只能用于文件不能用于目录，不会创建额外 inode，它和源文件共用同一个 inode，修改源文件之后，硬链接中的文件内容也同时发生了变更")]),e._v(" "),a("ul",[a("li",[e._v("删除源文件不会影响硬链接文件的访问（因为inode还在）")]),e._v(" "),a("li",[e._v("删除源文件会影响软链接文件的访问（因为指向的inode已经不存在了）")]),e._v(" "),a("li",[e._v("硬链接不占用磁盘空间，软链接占用的空间只是存储路径所占用的极小空间")])]),e._v(" "),a("h2",{attrs:{id:"pnpm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pnpm"}},[e._v("#")]),e._v(" pnpm")]),e._v(" "),a("p",[e._v("使用 npm 时，依赖每次被不同的项目使用，都会重复安装一次。  而在使用 pnpm 时，依赖会被存储在内容可寻址的存储中，所以如果你用到了某依赖项的不同版本，只会将不同版本间有差异的文件添加到仓库。 例如，如果某个包有100个文件，而它的新版本只改变了其中1个文件。那么 "),a("code",[e._v("pnpm update")]),e._v(" 时只会向存储中心额外添加1个新文件，而不会因为仅仅一个文件的改变复制整新版本包的内容。")]),e._v(" "),a("p",[e._v("pnpm 本质上就是一个包管理器，这一点跟 npm/yarn 没有区别，但它具有两个优势:")]),e._v(" "),a("ul",[a("li",[e._v("包安装速度极快；")]),e._v(" "),a("li",[e._v("磁盘空间利用非常高效。")])]),e._v(" "),a("p",[e._v("pnpm在安装依赖包时，不像npm和yarn那样将每个项目的依赖包存储到各自的node_modules中，而是将依赖包存储到系统的全局存储库中（通常在 ~/.pnpm-store 目录下）使用 pnpm 对项目安装依赖的时候，如果某个依赖在 store目录中存在了话，那么就会直接从 store 目录里面去 hard-link硬链接减少了文件下载的数量，从而提升了下载和响应速度。避免了二次安装带来的时间消耗，如果依赖在 store 目录里面不存在的话，就会去下载一次。接着在项目中则通过"),a("code",[e._v("symbolic link")]),e._v("软链接到"),a("code",[e._v(".pnpm/node_modules")]),e._v("目录中")]),e._v(" "),a("p",[e._v("pnpm：网状 + 平铺的node_modules结构")]),e._v(" "),a("p",[e._v(".pnpm 目录之外的其实是我们在日常开发中实际引用的是依赖，但是它对于 pnpm 来说它是软链接，最终软链接实际引用的还是 .pnpm 中的真实依赖。解决“幽灵依赖”的问题，只有声明过的依赖才会以软链接的形式出现在 node_modules 目录中。在实际项目中引用的是软链接，软链接指向的是 .pnpm 的真实依赖，所以在日常开发中不会引用到未在 package.json 声明的包")]),e._v(" "),a("p",[a("code",[e._v(".pnpm")]),e._v(" (虚拟存储目录)以平铺的形式储存着所有的包，正常的包都可以在这种命名模式的文件夹中被找到，该目录通过"),a("code",[e._v("<package-name>@<version>")]),e._v("来实现相同模块不同版本之间隔离和复用，由于"),a("strong",[e._v("它只会根据项目中的依赖生成")]),e._v("，并不存在提升，如果 有 peer 依赖（peer dependencies），那么它可能就会有多组依赖项，所以我们为不同的 peer 依赖项创建不同的解析")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("- foo-parent-1\n  - bar@1.0.0\n  - baz@1.0.0\n  - foo@1.0.0\n- foo-parent-2\n  - bar@1.0.0\n  - baz@1.1.0\n  - foo@1.0.0\n\nnode_modules\n└── .pnpm\n    ├── foo@1.0.0_bar@1.0.0+baz@1.0.0\n    │   └── node_modules\n    │       ├── foo\n    │       ├── bar   -> ../../bar@1.0.0/node_modules/bar\n    │       ├── baz   -> ../../baz@1.0.0/node_modules/baz\n    │       ├── qux   -> ../../qux@1.0.0/node_modules/qux\n    │       └── plugh -> ../../plugh@1.0.0/node_modules/plugh\n    ├── foo@1.0.0_bar@1.0.0+baz@1.1.0\n    │   └── node_modules\n    │       ├── foo\n    │       ├── bar   -> ../../bar@1.0.0/node_modules/bar\n    │       ├── baz   -> ../../baz@1.1.0/node_modules/baz\n    │       ├── qux   -> ../../qux@1.0.0/node_modules/qux\n    │       └── plugh -> ../../plugh@1.0.0/node_modules/plugh\n    ├── bar@1.0.0\n    ├── baz@1.0.0\n    ├── baz@1.1.0\n    ├── qux@1.0.0\n    ├── plugh@1.0.0\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br"),a("span",{staticClass:"line-number"},[e._v("19")]),a("br"),a("span",{staticClass:"line-number"},[e._v("20")]),a("br"),a("span",{staticClass:"line-number"},[e._v("21")]),a("br"),a("span",{staticClass:"line-number"},[e._v("22")]),a("br"),a("span",{staticClass:"line-number"},[e._v("23")]),a("br"),a("span",{staticClass:"line-number"},[e._v("24")]),a("br"),a("span",{staticClass:"line-number"},[e._v("25")]),a("br"),a("span",{staticClass:"line-number"},[e._v("26")]),a("br"),a("span",{staticClass:"line-number"},[e._v("27")]),a("br"),a("span",{staticClass:"line-number"},[e._v("28")]),a("br"),a("span",{staticClass:"line-number"},[e._v("29")]),a("br"),a("span",{staticClass:"line-number"},[e._v("30")]),a("br")])]),a("p",[a("img",{attrs:{src:n(467),alt:"image-20230401160125390"}})]),e._v(" "),a("p",[e._v("安装子包的依赖")]),e._v(" "),a("p",[e._v("除了进入子包目录直接安装"),a("code",[e._v("pnpm add pkgname")]),e._v("之外，还可以通过过滤参数 "),a("code",[e._v("--filter")]),e._v("或"),a("code",[e._v("-F")]),e._v("指定命令作用范围。我在packages目录下新建两个子包，分别为"),a("code",[e._v("tools")]),e._v("和"),a("code",[e._v("mini-cli")]),e._v("，假如我要在"),a("code",[e._v("min-cli")]),e._v("包下安装"),a("code",[e._v("react")]),e._v("，那么，我们可以执行以下命令")]),e._v(" "),a("p",[a("code",[e._v("pnpm --filter mini-cli add react")])]),e._v(" "),a("h2",{attrs:{id:"pnpm-workspace-工作空间协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pnpm-workspace-工作空间协议"}},[e._v("#")]),e._v(" pnpm workspace 工作空间协议")]),e._v(" "),a("p",[e._v("默认情况下，如果可用的"),a("code",[e._v("packages")]),e._v("与已声明的可用范围相匹配，pnpm 将从工作区链接这些"),a("code",[e._v("packages")]),e._v("。 例如，如果 "),a("code",[e._v("bar")]),e._v(" 中有 "),a("code",[e._v('"foo"："^1.0.0"')]),e._v(" 的这个依赖项，则 "),a("code",[e._v("foo@1.0.0")]),e._v(" 链接到 "),a("code",[e._v("bar")]),e._v(" 。 但是，如果 "),a("code",[e._v("bar")]),e._v(" 的依赖项中有"),a("code",[e._v('"foo": "2.0.0"')]),e._v(" ，而"),a("code",[e._v("foo@2.0.0")]),e._v(" 在工作空间中并不存在，则将从npm registry安装"),a("code",[e._v("foo@2.0.0")]),e._v(" 。 这种行为带来了一些不确定性。")]),e._v(" "),a("p",[a("code",[e._v("pnpm")]),e._v("从版本 "),a("strong",[e._v("3.7")]),e._v(" 开始支持工作区协议"),a("code",[e._v("workspace:")]),e._v(" 。当使用此协议时，pnpm 将拒绝解析除本地工作区 "),a("code",[e._v("package")]),e._v(" 之外的任何内容。 因此，如果您设置为 "),a("code",[e._v('"foo": "workspace:2.0.0"')]),e._v(" 时，安装将会失败，因为 "),a("code",[e._v('"foo@2.0.0"')]),e._v(" 不存在于工作空间中。这个特性在monorepo当中特别有用。")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{  \n    "dependencies": {  \n        "foo": "workspace:*",  \n        "bar": "workspace:~",  \n        "qar": "workspace:^",  \n        "zoo": "workspace:^1.5.0"  \n    }  \n}\n被解析为\n{  \n    "dependencies": {  \n        "foo": "1.5.0",  \n        "bar": "~1.5.0",  \n        "qar": "^1.5.0",  \n        "zoo": "^1.5.0"  \n    }  \n}\n\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br"),a("span",{staticClass:"line-number"},[e._v("14")]),a("br"),a("span",{staticClass:"line-number"},[e._v("15")]),a("br"),a("span",{staticClass:"line-number"},[e._v("16")]),a("br"),a("span",{staticClass:"line-number"},[e._v("17")]),a("br"),a("span",{staticClass:"line-number"},[e._v("18")]),a("br")])]),a("p",[e._v("可以通过修改配置"),a("code",[e._v("link-workspace-packages")]),e._v("来改变包的使用方式（远端下载 or 本地）。"),a("code",[e._v("link-workspace-packages")]),e._v("有三个值")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("true")]),e._v(" 默认")]),e._v(" "),a("li",[a("strong",[e._v("false")]),e._v(" 禁用后，可实现仅从"),a("code",[e._v("registry")]),e._v("安装")])]),e._v(" "),a("h2",{attrs:{id:"package-lock-json文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#package-lock-json文件"}},[e._v("#")]),e._v(" package-lock.json文件")]),e._v(" "),a("img",{staticStyle:{zoom:"150%"},attrs:{src:n(468),alt:"image-20230321084803087"}}),e._v(" "),a("ul",[a("li",[e._v("-S是--save的简写表示开发和部署上线都会用到 dependencies属性")]),e._v(" "),a("li",[e._v("-D是--save-dev的简写表示开发用到但部署上线不会用到 devDependencies属性 如babel webpack")]),e._v(" "),a("li",[e._v("peerDependencies属性 表示对等依赖 依赖一个包必须以另一个宿主为前提 比如element-plus 依赖Vue3")]),e._v(" "),a("li",[e._v("版本依赖管理 ^x.y.z表示x保持不变yz安装最新版本     ~x.y.z表示xy保持不变z安装最新版本")])]),e._v(" "),a("h2",{attrs:{id:"npx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npx"}},[e._v("#")]),e._v(" npx")]),e._v(" "),a("p",[e._v("npx是一个工具，npm v5.2.0引入的一条命令（npx），一个npm包执行器，旨在提高从npm注册表使用软件包的体验")]),e._v(" "),a("p",[a("strong",[e._v("调用项目安装的模块")])]),e._v(" "),a("p",[e._v("npx 的原理就是运行的时候，会到"),a("code",[e._v("node_modules/.bin")]),e._v("路径和环境变量"),a("code",[e._v("$PATH")]),e._v("里面，检查命令是否存在。")]),e._v(" "),a("p",[e._v("由于 npx 会检查环境变量"),a("code",[e._v("$PATH")]),e._v("，所以系统命令也可以调用。")]),e._v(" "),a("p",[e._v("一般来说，调用 Mocha ，只能在项目脚本和 package.json 的"),a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2016/10/npm_scripts.html",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("scripts")]),a("OutboundLink")],1),e._v("字段里面， 如果想在命令行下调用，必须像下面这样。")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 项目的根目录下执行")]),e._v("\nnode-modules/.bin/mocha "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--version")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# npx 就是想解决这个问题，让项目内部安装的模块用起来更方便，只要像下面这样调用就行了。")]),e._v("\nnpx mocha "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--version")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("p",[a("strong",[e._v("避免全局安装模块")])]),e._v(" "),a("p",[e._v("除了调用项目内部模块，npx 还能避免全局安装的模块。比如，"),a("code",[e._v("create-react-app")]),e._v("这个模块是全局安装，npx 可以运行它，而且不进行全局安装。")]),e._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("npx create-react-app my-react-app\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("上面代码运行时，npx 将"),a("code",[e._v("create-react-app")]),e._v("下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载"),a("code",[e._v("create-react-app")]),e._v("。")]),e._v(" "),a("p",[e._v("利用 npx 可以下载模块这个特点，可以指定某个版本的 Node 运行脚本。它的窍门就是使用 npm 的 node 模块")]),e._v(" "),a("blockquote",[a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("npx node@0.12.8 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v("\nv0.12.8\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])])]),e._v(" "),a("p",[e._v("上面命令会使用 0.12.8 版本的 Node 执行脚本。原理是从 npm 下载这个版本的 node，使用后再删掉。")]),e._v(" "),a("h2",{attrs:{id:"npmrc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npmrc"}},[e._v("#")]),e._v(" .npmrc")]),e._v(" "),a("p",[e._v("npmrc是npm的配置文件，它位于用户主目录下的"),a("code",[e._v(".npmrc")]),e._v("文件或项目根目录下的"),a("code",[e._v(".npmrc")]),e._v("文件。npmrc文件由一系列键值对组成，用于配置npm在执行命令时的行为和参数")]),e._v(" "),a("p",[e._v("定义镜像源，管理依赖存储路径、保存开发依赖...")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/7262256657131651132#heading-11",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入了解npmrc：使用与配置指南 - 掘金 (juejin.cn)"),a("OutboundLink")],1)]),e._v(" "),a("h2",{attrs:{id:"npm-install-过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#npm-install-过程"}},[e._v("#")]),e._v(" npm install 过程")]),e._v(" "),a("p",[a("img",{attrs:{src:n(469),alt:"image-20230321085306628"}}),e._v("\n图片勘误: 压缩到node_modules改为解压到node_modules")]),e._v(" "),a("ol",[a("li",[e._v("解析package.json文件：根据项目中的package.json文件确定需要安装的依赖包及其版本。")]),e._v(" "),a("li",[e._v("下载依赖包：从NPM仓库下载需要安装的依赖包及其相关依赖包。")]),e._v(" "),a("li",[e._v("安装依赖包：将下载下来的依赖包解压缩，并将其复制到项目目录的node_modules文件夹下。")]),e._v(" "),a("li",[e._v("执行依赖包的安装脚本：如果依赖包中包含installer或preinstall脚本，那么在安装后会被执行。")]),e._v(" "),a("li",[e._v("生成依赖关系树：根据依赖包的依赖关系，生成依赖关系树。")]),e._v(" "),a("li",[e._v("保存依赖信息：将安装的依赖包及其版本号保存到package-lock.json或yarn.lock文件中，以便在下次安装时使用。")])]),e._v(" "),a("h2",{attrs:{id:"peerdependencies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#peerdependencies"}},[e._v("#")]),e._v(" peerDependencies")]),e._v(" "),a("p",[e._v("peer 依赖，也叫同等依赖，或者叫同伴依赖，用于指定当前包（也就是你所要开发的包）使用的这个依赖要兼容的宿主环境中这个依赖的版本。用于解决插件与所依赖包不一致的问题。防止项目安装该插件时，多次安装相同的库")]),e._v(" "),a("p",[e._v("比如开发vue相关的插件时，需要将vue这一依赖作为peerDependencies项，这样，当插件在vue项目中使用时，vue这个依赖，就会被安装一次了。")]),e._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://pnpm.io/zh/how-peers-are-resolved",target:"_blank",rel:"noopener noreferrer"}},[e._v("peers 是如何被处理的 | pnpm官网"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/7053340250210795557#heading-0",target:"_blank",rel:"noopener noreferrer"}},[e._v("pnpm快到碗里来！ - 掘金 (juejin.cn)"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("["),a("a",{attrs:{href:"https://juejin.cn/post/7071992448511279141#heading-3",target:"_blank",rel:"noopener noreferrer"}},[e._v("译]用 PNPM Workspaces 替换 Lerna + Yarn - 掘金 (juejin.cn)"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.freecodecamp.org/chinese/news/what-is-npm-a-node-package-manager-tutorial-for-beginners/",target:"_blank",rel:"noopener noreferrer"}},[e._v("什么是 npm —— 写给初学者的编程教程 (freecodecamp.org)"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.jianshu.com/p/254794d5e741",target:"_blank",rel:"noopener noreferrer"}},[e._v("npm和yarn的区别，我们该如何选择? - 简书 (jianshu.com)"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2019/02/npx.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("npx 使用教程 - 阮一峰的网络日志 (ruanyifeng.com)"),a("OutboundLink")],1)]),e._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6983522411647860766",target:"_blank",rel:"noopener noreferrer"}},[e._v("npm中，你不了解的.npmrc文件 - 掘金 (juejin.cn)"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);