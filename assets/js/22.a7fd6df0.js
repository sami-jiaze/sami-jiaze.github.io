(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{449:function(v,e,_){v.exports=_.p+"assets/img/image-20230108164514855.98c67600.png"},450:function(v,e,_){v.exports=_.p+"assets/img/image-20221101200851217.25b5dfb3.png"},451:function(v,e,_){v.exports=_.p+"assets/img/02.bdcbcf9f.png"},570:function(v,e,_){"use strict";_.r(e);var t=_(2),r=Object(t.a)({},(function(){var v=this,e=v._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("说明")]),v._v(" "),e("p",[v._v("MVC、MVVM与三层架构概念笔记总结")])]),v._v(" "),e("h2",{attrs:{id:"三层架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三层架构"}},[v._v("#")]),v._v(" 三层架构")]),v._v(" "),e("p",[v._v("三层架构是指："),e("strong",[v._v("视图层view（表现层）")]),v._v("，"),e("strong",[v._v("服务层service（业务逻辑层）")]),v._v("，"),e("strong",[v._v("持久层Dao（数据访问层）")])]),v._v(" "),e("p",[v._v("1.view层： 用于显示数据和接收用户输入的数据，为用户提供一种交互式操作的界面。主要作用是界面展示，接收请求，分发请求。")]),v._v(" "),e("p",[v._v("2.service层：实现业务的主要逻辑，是系统架构中体现核心价值的部分。将一个业务中所有的操作封装成一个方法，同时保证方法中所有的数据库更新操作，即保证同时成功或同时失败。避免部分成功部分失败引起的数据混乱操作。")]),v._v(" "),e("p",[v._v("3.Dao层：也称为是持久层，其功能主要是负责数据库的访问（可以访问数据库、二进制文件、文本文件等），是对数据库，而不是对数据的操作。简单的说法就是实现对数据表的Select，Insert，Update，Delete的操作。如果要加入ORM的元素，那么就会包括对象和数据表之间的mapping，以及对象实体的持久化。也就是哪个类对应哪个表，哪个属性对应哪个列。持久层的目的就是，完成对象数据和关系数据的转换。")]),v._v(" "),e("h2",{attrs:{id:"mvc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvc"}},[v._v("#")]),v._v(" MVC")]),v._v(" "),e("p",[v._v("MVC 是在三层架构的基础上设计的一种框架型架构，三层架构是一种宏观的概念，而 MVC 就是一种比较具体的三层架构的框架实现")]),v._v(" "),e("p",[v._v("MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("Model（模型）")]),v._v(" "),e("p",[v._v("编写程序应用功能（实现算法等等），数据库管理，也就是实体类。用于数据的封装和数据的传输")])]),v._v(" "),e("li",[e("p",[v._v("View（视图）")]),v._v(" "),e("p",[v._v("显示效果（HTML页面）。是应用程序中处理"),e("strong",[v._v("数据显示")]),v._v("的部分。通常视图是依据模型数据创建的。视图层，前端")])]),v._v(" "),e("li",[e("p",[v._v("Controller（控制器）")]),v._v(" "),e("p",[v._v("处理输入（业务逻辑）。是应用程序中处理"),e("strong",[v._v("用户交互")]),v._v("的部分。**控制器负责从视图读取数据，控制用户输入，并将数据发送给模型。**一般包括业务处理模块和router路由模块，对请求进行处理，负责请求转发，也就是事件，用于流程的控制")])])]),v._v(" "),e("p",[e("img",{attrs:{src:_(449),alt:"image-20230108164514855"}})]),v._v(" "),e("p",[e("strong",[v._v("MVC框架的工作流程")]),v._v("：")]),v._v(" "),e("p",[v._v("1.用户通过View页面向服务端提出请求，可以是表单请求、超链接请求、AJAX请求等。")]),v._v(" "),e("p",[v._v("2.服务端Controller控制器接收到请求后对请求进行解析，找到相应 的Model对用户请求进行处理。")]),v._v(" "),e("p",[v._v("3.Model处理后，将处理结果再交给Controller")]),v._v(" "),e("p",[v._v("4.Controller在接到处理结果后，根据处理结果找到要作为向客户端发回的响应View页面。页面经渲染（数据填充）后，再发送给客户端")]),v._v(" "),e("p",[e("strong",[v._v("MVC优点：")])]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("耦合度低")]),v._v("（运用MVC的应用程序的三个部件是相互独立的，改变其中一个不会影响其他两个）；")]),v._v(" "),e("li",[v._v("重用性高（多个视图可以使用同一个模型）")]),v._v(" "),e("li",[v._v("生命周期成本低")]),v._v(" "),e("li",[v._v("部署快（业务分工明确）")]),v._v(" "),e("li",[e("strong",[v._v("可维护性高")])])]),v._v(" "),e("p",[e("strong",[v._v("MVC缺点：")])]),v._v(" "),e("ul",[e("li",[v._v("不适合小型项目开发")]),v._v(" "),e("li",[e("strong",[v._v("视图与控制器联系过于紧密")]),v._v("，妨碍了它们的独立重用")])]),v._v(" "),e("h2",{attrs:{id:"mvvm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvvm"}},[v._v("#")]),v._v(" MVVM")]),v._v(" "),e("p",[v._v("MVVM由Model，View，ViewModel三部分构成。")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("Model")]),v._v(" "),e("p",[v._v("代表数据模型（Vue的data），"),e("strong",[v._v("数据和业务逻辑")]),v._v("都在Model层中定义；")])]),v._v(" "),e("li",[e("p",[v._v("View")]),v._v(" "),e("p",[v._v("代表UI视图，负责"),e("strong",[v._v("数据的展示")]),v._v("（Vue的el）")])]),v._v(" "),e("li",[e("p",[v._v("ViewModel")]),v._v(" "),e("p",[v._v("是一个对象，负责"),e("strong",[v._v("监听 Model 中数据的改变")]),v._v("并且"),e("strong",[v._v("控制View视图的更新")]),v._v("，处理用户交互操作；")])])]),v._v(" "),e("p",[e("img",{attrs:{src:_(450),alt:"image-20221101200851217"}})]),v._v(" "),e("p",[e("img",{attrs:{src:_(451),alt:""}})]),v._v(" "),e("p",[e("strong",[v._v("Model")]),v._v(" 和 "),e("strong",[v._v("View")]),v._v(" 并无直接关联，而是通过 "),e("strong",[v._v("ViewModel")]),v._v(" 来进行交互的（即双向数据绑定），")]),v._v(" "),e("p",[e("strong",[v._v("Model")]),v._v(" 和 "),e("strong",[v._v("ViewModel")]),v._v("之间有着"),e("strong",[v._v("双向数据绑定的联系")]),v._v("。\nView的变化可以引起Model的变化，Model的变化也可以引起View变化（类似于浅拷贝）。"),e("code",[v._v("ViewModel")]),v._v("是"),e("code",[v._v("View")]),v._v("和"),e("code",[v._v("Model")]),v._v("层的桥梁，数据会绑定到"),e("code",[v._v("viewModel")]),v._v("层并自动将数据渲染到页面中，视图变化的时候会通知"),e("code",[v._v("viewModel")]),v._v("层更新数据。")]),v._v(" "),e("h2",{attrs:{id:"mvvm与mvc区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvvm与mvc区别"}},[v._v("#")]),v._v(" MVVM与MVC区别")]),v._v(" "),e("ol",[e("li",[v._v("mvc中Model和View是可以直接打交道的，造成Model层和View层之间的耦合度高。而mvvm中Model和View不直接交互，而是通过中间桥梁ViewModel来同步")]),v._v(" "),e("li",[v._v("mvvm 通过数据来驱动视图层的显示而不是节点操作。当Model属性改变时，不用手动操作Dom元素去改变View的显示")])]),v._v(" "),e("h2",{attrs:{id:"mvvm响应式原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvvm响应式原理"}},[v._v("#")]),v._v(" MVVM响应式原理")]),v._v(" "),e("ul",[e("li",[v._v("vue是采用数据劫持配合发布者-订阅者的模式的方式\n"),e("ul",[e("li",[v._v("通过"),e("strong",[v._v("Object.defineProperty()来劫持各个属性的getter和setter")]),v._v("，")]),v._v(" "),e("li",[v._v("在数据变动时，发布消息给依赖收集器（dep中的subs），去通知（notify）观察者，做出对应的回调函数，更新视图")])])]),v._v(" "),e("li",[v._v("MVVM作为绑定的入口，整合Observer,Compile和Watcher三者，\n"),e("ul",[e("li",[v._v("通过Observer来监听model数据变化，")]),v._v(" "),e("li",[v._v("通过Compile来解析编译模板指令，")]),v._v(" "),e("li",[v._v("最终利用Watcher搭起Observer，Compile之间的通信桥路，")]),v._v(" "),e("li",[v._v("达到"),e("strong",[v._v("数据变化Observer）=>视图更新")]),v._v("；"),e("strong",[v._v("视图交互变化=>数据model变更")]),v._v("的双向绑定效果。")])])])]),v._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[v._v("#")]),v._v(" 参考")]),v._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/7110885291946147876",target:"_blank",rel:"noopener noreferrer"}},[v._v("MVC与MVVM模式的区别 - 掘金 (juejin.cn)"),e("OutboundLink")],1)]),v._v(" "),e("p",[e("a",{attrs:{href:"https://www.cnblogs.com/wenkangIT/p/15149077.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("MVC、MVVM模式的概念与区别 - 理想三旬· - 博客园 (cnblogs.com)"),e("OutboundLink")],1)]),v._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6950934103227105317",target:"_blank",rel:"noopener noreferrer"}},[v._v("浅谈MVVM架构 - 掘金 (juejin.cn)"),e("OutboundLink")],1)]),v._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/Tranne/article/details/109022923",target:"_blank",rel:"noopener noreferrer"}},[v._v("(42条消息) SSM，三层结构，MVC三者的说明及关系(很全面)_mvc各个模块_小群 Carl Tong的博客-CSDN博客"),e("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);